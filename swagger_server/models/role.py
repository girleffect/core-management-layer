# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.role_label import RoleLabel  # noqa: F401,E501
from swagger_server import util


class Role(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, label: RoleLabel=None, is_admin_role: bool=None, description: str=None, created_at: datetime=None, updated_at: datetime=None):  # noqa: E501
        """Role - a model defined in Swagger

        :param id: The id of this Role.  # noqa: E501
        :type id: int
        :param label: The label of this Role.  # noqa: E501
        :type label: RoleLabel
        :param is_admin_role: The is_admin_role of this Role.  # noqa: E501
        :type is_admin_role: bool
        :param description: The description of this Role.  # noqa: E501
        :type description: str
        :param created_at: The created_at of this Role.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this Role.  # noqa: E501
        :type updated_at: datetime
        """
        self.swagger_types = {
            'id': int,
            'label': RoleLabel,
            'is_admin_role': bool,
            'description': str,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'label': 'label',
            'is_admin_role': 'is_admin_role',
            'description': 'description',
            'created_at': 'created_at',
            'updated_at': 'updated_at'
        }

        self._id = id
        self._label = label
        self._is_admin_role = is_admin_role
        self._description = description
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'Role':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The role of this Role.  # noqa: E501
        :rtype: Role
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Role.


        :return: The id of this Role.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Role.


        :param id: The id of this Role.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def label(self) -> RoleLabel:
        """Gets the label of this Role.


        :return: The label of this Role.
        :rtype: RoleLabel
        """
        return self._label

    @label.setter
    def label(self, label: RoleLabel):
        """Sets the label of this Role.


        :param label: The label of this Role.
        :type label: RoleLabel
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def is_admin_role(self) -> bool:
        """Gets the is_admin_role of this Role.


        :return: The is_admin_role of this Role.
        :rtype: bool
        """
        return self._is_admin_role

    @is_admin_role.setter
    def is_admin_role(self, is_admin_role: bool):
        """Sets the is_admin_role of this Role.


        :param is_admin_role: The is_admin_role of this Role.
        :type is_admin_role: bool
        """
        if is_admin_role is None:
            raise ValueError("Invalid value for `is_admin_role`, must not be `None`")  # noqa: E501

        self._is_admin_role = is_admin_role

    @property
    def description(self) -> str:
        """Gets the description of this Role.


        :return: The description of this Role.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Role.


        :param description: The description of this Role.
        :type description: str
        """

        self._description = description

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this Role.


        :return: The created_at of this Role.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this Role.


        :param created_at: The created_at of this Role.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this Role.


        :return: The updated_at of this Role.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this Role.


        :param updated_at: The updated_at of this Role.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at
