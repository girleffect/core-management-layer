# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class InvitationUpdate(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, first_name: str=None, last_name: str=None, email: str=None, expires_at: datetime=None):
        """
        InvitationUpdate - a model defined in Swagger

        :param first_name: The first_name of this InvitationUpdate.
        :type first_name: str
        :param last_name: The last_name of this InvitationUpdate.
        :type last_name: str
        :param email: The email of this InvitationUpdate.
        :type email: str
        :param expires_at: The expires_at of this InvitationUpdate.
        :type expires_at: datetime
        """
        self.swagger_types = {
            'first_name': str,
            'last_name': str,
            'email': str,
            'expires_at': datetime
        }

        self.attribute_map = {
            'first_name': 'first_name',
            'last_name': 'last_name',
            'email': 'email',
            'expires_at': 'expires_at'
        }

        self._first_name = first_name
        self._last_name = last_name
        self._email = email
        self._expires_at = expires_at

    @classmethod
    def from_dict(cls, dikt) -> 'InvitationUpdate':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The invitation_update of this InvitationUpdate.
        :rtype: InvitationUpdate
        """
        return deserialize_model(dikt, cls)

    @property
    def first_name(self) -> str:
        """
        Gets the first_name of this InvitationUpdate.

        :return: The first_name of this InvitationUpdate.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """
        Sets the first_name of this InvitationUpdate.

        :param first_name: The first_name of this InvitationUpdate.
        :type first_name: str
        """
        if first_name is not None and len(first_name) > 100:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `100`")

        self._first_name = first_name

    @property
    def last_name(self) -> str:
        """
        Gets the last_name of this InvitationUpdate.

        :return: The last_name of this InvitationUpdate.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """
        Sets the last_name of this InvitationUpdate.

        :param last_name: The last_name of this InvitationUpdate.
        :type last_name: str
        """
        if last_name is not None and len(last_name) > 100:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `100`")

        self._last_name = last_name

    @property
    def email(self) -> str:
        """
        Gets the email of this InvitationUpdate.

        :return: The email of this InvitationUpdate.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """
        Sets the email of this InvitationUpdate.

        :param email: The email of this InvitationUpdate.
        :type email: str
        """

        self._email = email

    @property
    def expires_at(self) -> datetime:
        """
        Gets the expires_at of this InvitationUpdate.

        :return: The expires_at of this InvitationUpdate.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at: datetime):
        """
        Sets the expires_at of this InvitationUpdate.

        :param expires_at: The expires_at of this InvitationUpdate.
        :type expires_at: datetime
        """

        self._expires_at = expires_at

