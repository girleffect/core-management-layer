# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ClientCreate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, post_logout_redirect_uris: str=None, redirect_uris: str=None, client_id: str=None, client_type: str=None, contact_email: str=None, jwt_alg: str=None, logo: str=None, name: str=None, require_consent: bool=None, response_type: str=None, reuse_consent: bool=None, terms_url: str=None, website_url: str=None):  # noqa: E501
        """ClientCreate - a model defined in Swagger

        :param post_logout_redirect_uris: The post_logout_redirect_uris of this ClientCreate.  # noqa: E501
        :type post_logout_redirect_uris: str
        :param redirect_uris: The redirect_uris of this ClientCreate.  # noqa: E501
        :type redirect_uris: str
        :param client_id: The client_id of this ClientCreate.  # noqa: E501
        :type client_id: str
        :param client_type: The client_type of this ClientCreate.  # noqa: E501
        :type client_type: str
        :param contact_email: The contact_email of this ClientCreate.  # noqa: E501
        :type contact_email: str
        :param jwt_alg: The jwt_alg of this ClientCreate.  # noqa: E501
        :type jwt_alg: str
        :param logo: The logo of this ClientCreate.  # noqa: E501
        :type logo: str
        :param name: The name of this ClientCreate.  # noqa: E501
        :type name: str
        :param require_consent: The require_consent of this ClientCreate.  # noqa: E501
        :type require_consent: bool
        :param response_type: The response_type of this ClientCreate.  # noqa: E501
        :type response_type: str
        :param reuse_consent: The reuse_consent of this ClientCreate.  # noqa: E501
        :type reuse_consent: bool
        :param terms_url: The terms_url of this ClientCreate.  # noqa: E501
        :type terms_url: str
        :param website_url: The website_url of this ClientCreate.  # noqa: E501
        :type website_url: str
        """
        self.swagger_types = {
            'post_logout_redirect_uris': str,
            'redirect_uris': str,
            'client_id': str,
            'client_type': str,
            'contact_email': str,
            'jwt_alg': str,
            'logo': str,
            'name': str,
            'require_consent': bool,
            'response_type': str,
            'reuse_consent': bool,
            'terms_url': str,
            'website_url': str
        }

        self.attribute_map = {
            'post_logout_redirect_uris': '_post_logout_redirect_uris',
            'redirect_uris': '_redirect_uris',
            'client_id': 'client_id',
            'client_type': 'client_type',
            'contact_email': 'contact_email',
            'jwt_alg': 'jwt_alg',
            'logo': 'logo',
            'name': 'name',
            'require_consent': 'require_consent',
            'response_type': 'response_type',
            'reuse_consent': 'reuse_consent',
            'terms_url': 'terms_url',
            'website_url': 'website_url'
        }

        self._post_logout_redirect_uris = post_logout_redirect_uris
        self._redirect_uris = redirect_uris
        self._client_id = client_id
        self._client_type = client_type
        self._contact_email = contact_email
        self._jwt_alg = jwt_alg
        self._logo = logo
        self._name = name
        self._require_consent = require_consent
        self._response_type = response_type
        self._reuse_consent = reuse_consent
        self._terms_url = terms_url
        self._website_url = website_url

    @classmethod
    def from_dict(cls, dikt) -> 'ClientCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The client_create of this ClientCreate.  # noqa: E501
        :rtype: ClientCreate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def post_logout_redirect_uris(self) -> str:
        """Gets the post_logout_redirect_uris of this ClientCreate.

        New-line delimited list of post-logout redirect URIs  # noqa: E501

        :return: The post_logout_redirect_uris of this ClientCreate.
        :rtype: str
        """
        return self._post_logout_redirect_uris

    @post_logout_redirect_uris.setter
    def post_logout_redirect_uris(self, post_logout_redirect_uris: str):
        """Sets the post_logout_redirect_uris of this ClientCreate.

        New-line delimited list of post-logout redirect URIs  # noqa: E501

        :param post_logout_redirect_uris: The post_logout_redirect_uris of this ClientCreate.
        :type post_logout_redirect_uris: str
        """

        self._post_logout_redirect_uris = post_logout_redirect_uris

    @property
    def redirect_uris(self) -> str:
        """Gets the redirect_uris of this ClientCreate.

        New-line delimited list of redirect URIs  # noqa: E501

        :return: The redirect_uris of this ClientCreate.
        :rtype: str
        """
        return self._redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, redirect_uris: str):
        """Sets the redirect_uris of this ClientCreate.

        New-line delimited list of redirect URIs  # noqa: E501

        :param redirect_uris: The redirect_uris of this ClientCreate.
        :type redirect_uris: str
        """

        self._redirect_uris = redirect_uris

    @property
    def client_id(self) -> str:
        """Gets the client_id of this ClientCreate.

          # noqa: E501

        :return: The client_id of this ClientCreate.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id: str):
        """Sets the client_id of this ClientCreate.

          # noqa: E501

        :param client_id: The client_id of this ClientCreate.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def client_type(self) -> str:
        """Gets the client_type of this ClientCreate.

        <b>Confidential</b> clients are capable of maintaining the confidentiality of their credentials. <b>Public</b> clients are incapable.  # noqa: E501

        :return: The client_type of this ClientCreate.
        :rtype: str
        """
        return self._client_type

    @client_type.setter
    def client_type(self, client_type: str):
        """Sets the client_type of this ClientCreate.

        <b>Confidential</b> clients are capable of maintaining the confidentiality of their credentials. <b>Public</b> clients are incapable.  # noqa: E501

        :param client_type: The client_type of this ClientCreate.
        :type client_type: str
        """

        self._client_type = client_type

    @property
    def contact_email(self) -> str:
        """Gets the contact_email of this ClientCreate.

          # noqa: E501

        :return: The contact_email of this ClientCreate.
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email: str):
        """Sets the contact_email of this ClientCreate.

          # noqa: E501

        :param contact_email: The contact_email of this ClientCreate.
        :type contact_email: str
        """

        self._contact_email = contact_email

    @property
    def jwt_alg(self) -> str:
        """Gets the jwt_alg of this ClientCreate.

        Algorithm used to encode ID Tokens.  # noqa: E501

        :return: The jwt_alg of this ClientCreate.
        :rtype: str
        """
        return self._jwt_alg

    @jwt_alg.setter
    def jwt_alg(self, jwt_alg: str):
        """Sets the jwt_alg of this ClientCreate.

        Algorithm used to encode ID Tokens.  # noqa: E501

        :param jwt_alg: The jwt_alg of this ClientCreate.
        :type jwt_alg: str
        """

        self._jwt_alg = jwt_alg

    @property
    def logo(self) -> str:
        """Gets the logo of this ClientCreate.

          # noqa: E501

        :return: The logo of this ClientCreate.
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo: str):
        """Sets the logo of this ClientCreate.

          # noqa: E501

        :param logo: The logo of this ClientCreate.
        :type logo: str
        """

        self._logo = logo

    @property
    def name(self) -> str:
        """Gets the name of this ClientCreate.

          # noqa: E501

        :return: The name of this ClientCreate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ClientCreate.

          # noqa: E501

        :param name: The name of this ClientCreate.
        :type name: str
        """

        self._name = name

    @property
    def require_consent(self) -> bool:
        """Gets the require_consent of this ClientCreate.

        If disabled, the Server will NEVER ask the user for consent.  # noqa: E501

        :return: The require_consent of this ClientCreate.
        :rtype: bool
        """
        return self._require_consent

    @require_consent.setter
    def require_consent(self, require_consent: bool):
        """Sets the require_consent of this ClientCreate.

        If disabled, the Server will NEVER ask the user for consent.  # noqa: E501

        :param require_consent: The require_consent of this ClientCreate.
        :type require_consent: bool
        """

        self._require_consent = require_consent

    @property
    def response_type(self) -> str:
        """Gets the response_type of this ClientCreate.

          # noqa: E501

        :return: The response_type of this ClientCreate.
        :rtype: str
        """
        return self._response_type

    @response_type.setter
    def response_type(self, response_type: str):
        """Sets the response_type of this ClientCreate.

          # noqa: E501

        :param response_type: The response_type of this ClientCreate.
        :type response_type: str
        """
        if response_type is None:
            raise ValueError("Invalid value for `response_type`, must not be `None`")  # noqa: E501

        self._response_type = response_type

    @property
    def reuse_consent(self) -> bool:
        """Gets the reuse_consent of this ClientCreate.

        If enabled, the Server will save the user consent given to a specific client, so that user won't be prompted for the same authorization multiple times.  # noqa: E501

        :return: The reuse_consent of this ClientCreate.
        :rtype: bool
        """
        return self._reuse_consent

    @reuse_consent.setter
    def reuse_consent(self, reuse_consent: bool):
        """Sets the reuse_consent of this ClientCreate.

        If enabled, the Server will save the user consent given to a specific client, so that user won't be prompted for the same authorization multiple times.  # noqa: E501

        :param reuse_consent: The reuse_consent of this ClientCreate.
        :type reuse_consent: bool
        """

        self._reuse_consent = reuse_consent

    @property
    def terms_url(self) -> str:
        """Gets the terms_url of this ClientCreate.

        External reference to the privacy policy of the client.  # noqa: E501

        :return: The terms_url of this ClientCreate.
        :rtype: str
        """
        return self._terms_url

    @terms_url.setter
    def terms_url(self, terms_url: str):
        """Sets the terms_url of this ClientCreate.

        External reference to the privacy policy of the client.  # noqa: E501

        :param terms_url: The terms_url of this ClientCreate.
        :type terms_url: str
        """

        self._terms_url = terms_url

    @property
    def website_url(self) -> str:
        """Gets the website_url of this ClientCreate.

          # noqa: E501

        :return: The website_url of this ClientCreate.
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url: str):
        """Sets the website_url of this ClientCreate.

          # noqa: E501

        :param website_url: The website_url of this ClientCreate.
        :type website_url: str
        """

        self._website_url = website_url
