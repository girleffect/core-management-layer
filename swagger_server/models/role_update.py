# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class RoleUpdate(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, label: str=None, is_admin_role: bool=None, description: str=None):
        """
        RoleUpdate - a model defined in Swagger

        :param label: The label of this RoleUpdate.
        :type label: str
        :param is_admin_role: The is_admin_role of this RoleUpdate.
        :type is_admin_role: bool
        :param description: The description of this RoleUpdate.
        :type description: str
        """
        self.swagger_types = {
            'label': str,
            'is_admin_role': bool,
            'description': str
        }

        self.attribute_map = {
            'label': 'label',
            'is_admin_role': 'is_admin_role',
            'description': 'description'
        }

        self._label = label
        self._is_admin_role = is_admin_role
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'RoleUpdate':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The role_update of this RoleUpdate.
        :rtype: RoleUpdate
        """
        return deserialize_model(dikt, cls)

    @property
    def label(self) -> str:
        """
        Gets the label of this RoleUpdate.

        :return: The label of this RoleUpdate.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label: str):
        """
        Sets the label of this RoleUpdate.

        :param label: The label of this RoleUpdate.
        :type label: str
        """
        if label is not None and len(label) > 100:
            raise ValueError("Invalid value for `label`, length must be less than or equal to `100`")

        self._label = label

    @property
    def is_admin_role(self) -> bool:
        """
        Gets the is_admin_role of this RoleUpdate.

        :return: The is_admin_role of this RoleUpdate.
        :rtype: bool
        """
        return self._is_admin_role

    @is_admin_role.setter
    def is_admin_role(self, is_admin_role: bool):
        """
        Sets the is_admin_role of this RoleUpdate.

        :param is_admin_role: The is_admin_role of this RoleUpdate.
        :type is_admin_role: bool
        """

        self._is_admin_role = is_admin_role

    @property
    def description(self) -> str:
        """
        Gets the description of this RoleUpdate.

        :return: The description of this RoleUpdate.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """
        Sets the description of this RoleUpdate.

        :param description: The description of this RoleUpdate.
        :type description: str
        """

        self._description = description

