# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.address import Address
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class UserInfo(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, sub: str=None, name: str=None, given_name: str=None, family_name: str=None, email: str=None, email_verified: bool=None, phone_number: str=None, phone_number_verified: bool=None, address: Address=None):
        """
        UserInfo - a model defined in Swagger

        :param sub: The sub of this UserInfo.
        :type sub: str
        :param name: The name of this UserInfo.
        :type name: str
        :param given_name: The given_name of this UserInfo.
        :type given_name: str
        :param family_name: The family_name of this UserInfo.
        :type family_name: str
        :param email: The email of this UserInfo.
        :type email: str
        :param email_verified: The email_verified of this UserInfo.
        :type email_verified: bool
        :param phone_number: The phone_number of this UserInfo.
        :type phone_number: str
        :param phone_number_verified: The phone_number_verified of this UserInfo.
        :type phone_number_verified: bool
        :param address: The address of this UserInfo.
        :type address: Address
        """
        self.swagger_types = {
            'sub': str,
            'name': str,
            'given_name': str,
            'family_name': str,
            'email': str,
            'email_verified': bool,
            'phone_number': str,
            'phone_number_verified': bool,
            'address': Address
        }

        self.attribute_map = {
            'sub': 'sub',
            'name': 'name',
            'given_name': 'given_name',
            'family_name': 'family_name',
            'email': 'email',
            'email_verified': 'email_verified',
            'phone_number': 'phone_number',
            'phone_number_verified': 'phone_number_verified',
            'address': 'address'
        }

        self._sub = sub
        self._name = name
        self._given_name = given_name
        self._family_name = family_name
        self._email = email
        self._email_verified = email_verified
        self._phone_number = phone_number
        self._phone_number_verified = phone_number_verified
        self._address = address

    @classmethod
    def from_dict(cls, dikt) -> 'UserInfo':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserInfo of this UserInfo.
        :rtype: UserInfo
        """
        return deserialize_model(dikt, cls)

    @property
    def sub(self) -> str:
        """
        Gets the sub of this UserInfo.

        :return: The sub of this UserInfo.
        :rtype: str
        """
        return self._sub

    @sub.setter
    def sub(self, sub: str):
        """
        Sets the sub of this UserInfo.

        :param sub: The sub of this UserInfo.
        :type sub: str
        """
        if sub is None:
            raise ValueError("Invalid value for `sub`, must not be `None`")

        self._sub = sub

    @property
    def name(self) -> str:
        """
        Gets the name of this UserInfo.

        :return: The name of this UserInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this UserInfo.

        :param name: The name of this UserInfo.
        :type name: str
        """

        self._name = name

    @property
    def given_name(self) -> str:
        """
        Gets the given_name of this UserInfo.

        :return: The given_name of this UserInfo.
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name: str):
        """
        Sets the given_name of this UserInfo.

        :param given_name: The given_name of this UserInfo.
        :type given_name: str
        """

        self._given_name = given_name

    @property
    def family_name(self) -> str:
        """
        Gets the family_name of this UserInfo.

        :return: The family_name of this UserInfo.
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name: str):
        """
        Sets the family_name of this UserInfo.

        :param family_name: The family_name of this UserInfo.
        :type family_name: str
        """

        self._family_name = family_name

    @property
    def email(self) -> str:
        """
        Gets the email of this UserInfo.

        :return: The email of this UserInfo.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """
        Sets the email of this UserInfo.

        :param email: The email of this UserInfo.
        :type email: str
        """

        self._email = email

    @property
    def email_verified(self) -> bool:
        """
        Gets the email_verified of this UserInfo.

        :return: The email_verified of this UserInfo.
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified: bool):
        """
        Sets the email_verified of this UserInfo.

        :param email_verified: The email_verified of this UserInfo.
        :type email_verified: bool
        """

        self._email_verified = email_verified

    @property
    def phone_number(self) -> str:
        """
        Gets the phone_number of this UserInfo.

        :return: The phone_number of this UserInfo.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number: str):
        """
        Sets the phone_number of this UserInfo.

        :param phone_number: The phone_number of this UserInfo.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def phone_number_verified(self) -> bool:
        """
        Gets the phone_number_verified of this UserInfo.

        :return: The phone_number_verified of this UserInfo.
        :rtype: bool
        """
        return self._phone_number_verified

    @phone_number_verified.setter
    def phone_number_verified(self, phone_number_verified: bool):
        """
        Sets the phone_number_verified of this UserInfo.

        :param phone_number_verified: The phone_number_verified of this UserInfo.
        :type phone_number_verified: bool
        """

        self._phone_number_verified = phone_number_verified

    @property
    def address(self) -> Address:
        """
        Gets the address of this UserInfo.

        :return: The address of this UserInfo.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address: Address):
        """
        Sets the address of this UserInfo.

        :param address: The address of this UserInfo.
        :type address: Address
        """

        self._address = address

