# coding: utf-8

"""
    Authentication Service API

    This is the API that will be exposed by the Authentication Service.  The Authentication service facilitates user registration and login via web-based flows as defined for the OpenID Connect specification. 

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class User(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'username': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'is_active': 'bool',
        'date_joined': 'date',
        'last_login': 'str'
    }

    attribute_map = {
        'id': 'id',
        'username': 'username',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'email': 'email',
        'is_active': 'is_active',
        'date_joined': 'date_joined',
        'last_login': 'last_login'
    }

    def __init__(self, id=None, username=None, first_name=None, last_name=None, email=None, is_active=None, date_joined=None, last_login=None):
        """
        User - a model defined in Swagger
        """

        self._id = None
        self._username = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._is_active = None
        self._date_joined = None
        self._last_login = None

        self.id = id
        self.username = username
        if first_name is not None:
          self.first_name = first_name
        if last_name is not None:
          self.last_name = last_name
        if email is not None:
          self.email = email
        self.is_active = is_active
        self.date_joined = date_joined
        if last_login is not None:
          self.last_login = last_login

    @property
    def id(self):
        """
        Gets the id of this User.
        A UUID identifying the user

        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this User.
        A UUID identifying the user

        :param id: The id of this User.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def username(self):
        """
        Gets the username of this User.
        Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.

        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this User.
        Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.

        :param username: The username of this User.
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username

    @property
    def first_name(self):
        """
        Gets the first_name of this User.
        

        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this User.
        

        :param first_name: The first_name of this User.
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """
        Gets the last_name of this User.
        

        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this User.
        

        :param last_name: The last_name of this User.
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """
        Gets the email of this User.
        

        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this User.
        

        :param email: The email of this User.
        :type: str
        """

        self._email = email

    @property
    def is_active(self):
        """
        Gets the is_active of this User.
        Designates whether this user should be treated as active. Deselect this instead of deleting accounts.

        :return: The is_active of this User.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """
        Sets the is_active of this User.
        Designates whether this user should be treated as active. Deselect this instead of deleting accounts.

        :param is_active: The is_active of this User.
        :type: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")

        self._is_active = is_active

    @property
    def date_joined(self):
        """
        Gets the date_joined of this User.
        

        :return: The date_joined of this User.
        :rtype: date
        """
        return self._date_joined

    @date_joined.setter
    def date_joined(self, date_joined):
        """
        Sets the date_joined of this User.
        

        :param date_joined: The date_joined of this User.
        :type: date
        """
        if date_joined is None:
            raise ValueError("Invalid value for `date_joined`, must not be `None`")

        self._date_joined = date_joined

    @property
    def last_login(self):
        """
        Gets the last_login of this User.
        

        :return: The last_login of this User.
        :rtype: str
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """
        Sets the last_login of this User.
        

        :param last_login: The last_login of this User.
        :type: str
        """

        self._last_login = last_login

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
