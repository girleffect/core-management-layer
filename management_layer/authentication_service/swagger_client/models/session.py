# coding: utf-8

"""
    Authentication Service API

    This is the API that will be exposed by the Authentication Service.  The Authentication Service facilitates user registration and login via web-based flows as defined for the OpenID Connect specification.   # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Session(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'int',
        'sub': 'str',
        'session_id': 'str',
        'session_state': 'str',
        'session_uri': 'str',
        'client_id': 'str',
        'scopes': 'list[str]',
        'scopes_optional': 'list[str]',
        'scopes_required': 'list[str]',
        'scopes_signed': 'list[str]',
        'tokens_seen': 'list[str]',
        'scopes_seen': 'list[str]',
        'redirect_uri': 'str',
        'response_type': 'str',
        'response_mode': 'str',
        'nonce': 'str',
        'created_at': 'str',
        'connected_at': 'datetime',
        'authenticated_at': 'datetime',
        'concluded_at': 'datetime',
        'deleted_at': 'datetime',
        'client_name': 'str',
        'client_uri': 'str',
        'logo_uri': 'str',
        'policy_uri': 'str',
        'tos_uri': 'str',
        'contacts': 'list[str]'
    }

    attribute_map = {
        'version': 'version',
        'sub': 'sub',
        'session_id': 'session_id',
        'session_state': 'session_state',
        'session_uri': 'session_uri',
        'client_id': 'client_id',
        'scopes': 'scopes',
        'scopes_optional': 'scopes_optional',
        'scopes_required': 'scopes_required',
        'scopes_signed': 'scopes_signed',
        'tokens_seen': 'tokens_seen',
        'scopes_seen': 'scopes_seen',
        'redirect_uri': 'redirect_uri',
        'response_type': 'response_type',
        'response_mode': 'response_mode',
        'nonce': 'nonce',
        'created_at': 'created_at',
        'connected_at': 'connected_at',
        'authenticated_at': 'authenticated_at',
        'concluded_at': 'concluded_at',
        'deleted_at': 'deleted_at',
        'client_name': 'client_name',
        'client_uri': 'client_uri',
        'logo_uri': 'logo_uri',
        'policy_uri': 'policy_uri',
        'tos_uri': 'tos_uri',
        'contacts': 'contacts'
    }

    def __init__(self, version=None, sub=None, session_id=None, session_state=None, session_uri=None, client_id=None, scopes=None, scopes_optional=None, scopes_required=None, scopes_signed=None, tokens_seen=None, scopes_seen=None, redirect_uri=None, response_type=None, response_mode=None, nonce=None, created_at=None, connected_at=None, authenticated_at=None, concluded_at=None, deleted_at=None, client_name=None, client_uri=None, logo_uri=None, policy_uri=None, tos_uri=None, contacts=None):  # noqa: E501
        """Session - a model defined in Swagger"""  # noqa: E501

        self._version = None
        self._sub = None
        self._session_id = None
        self._session_state = None
        self._session_uri = None
        self._client_id = None
        self._scopes = None
        self._scopes_optional = None
        self._scopes_required = None
        self._scopes_signed = None
        self._tokens_seen = None
        self._scopes_seen = None
        self._redirect_uri = None
        self._response_type = None
        self._response_mode = None
        self._nonce = None
        self._created_at = None
        self._connected_at = None
        self._authenticated_at = None
        self._concluded_at = None
        self._deleted_at = None
        self._client_name = None
        self._client_uri = None
        self._logo_uri = None
        self._policy_uri = None
        self._tos_uri = None
        self._contacts = None
        self.discriminator = None

        if version is not None:
            self.version = version
        if sub is not None:
            self.sub = sub
        if session_id is not None:
            self.session_id = session_id
        if session_state is not None:
            self.session_state = session_state
        if session_uri is not None:
            self.session_uri = session_uri
        if client_id is not None:
            self.client_id = client_id
        if scopes is not None:
            self.scopes = scopes
        if scopes_optional is not None:
            self.scopes_optional = scopes_optional
        if scopes_required is not None:
            self.scopes_required = scopes_required
        if scopes_signed is not None:
            self.scopes_signed = scopes_signed
        if tokens_seen is not None:
            self.tokens_seen = tokens_seen
        if scopes_seen is not None:
            self.scopes_seen = scopes_seen
        if redirect_uri is not None:
            self.redirect_uri = redirect_uri
        if response_type is not None:
            self.response_type = response_type
        if response_mode is not None:
            self.response_mode = response_mode
        if nonce is not None:
            self.nonce = nonce
        if created_at is not None:
            self.created_at = created_at
        if connected_at is not None:
            self.connected_at = connected_at
        if authenticated_at is not None:
            self.authenticated_at = authenticated_at
        if concluded_at is not None:
            self.concluded_at = concluded_at
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if client_name is not None:
            self.client_name = client_name
        if client_uri is not None:
            self.client_uri = client_uri
        if logo_uri is not None:
            self.logo_uri = logo_uri
        if policy_uri is not None:
            self.policy_uri = policy_uri
        if tos_uri is not None:
            self.tos_uri = tos_uri
        if contacts is not None:
            self.contacts = contacts

    @property
    def version(self):
        """Gets the version of this Session.  # noqa: E501


        :return: The version of this Session.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Session.


        :param version: The version of this Session.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def sub(self):
        """Gets the sub of this Session.  # noqa: E501


        :return: The sub of this Session.  # noqa: E501
        :rtype: str
        """
        return self._sub

    @sub.setter
    def sub(self, sub):
        """Sets the sub of this Session.


        :param sub: The sub of this Session.  # noqa: E501
        :type: str
        """

        self._sub = sub

    @property
    def session_id(self):
        """Gets the session_id of this Session.  # noqa: E501


        :return: The session_id of this Session.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this Session.


        :param session_id: The session_id of this Session.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def session_state(self):
        """Gets the session_state of this Session.  # noqa: E501


        :return: The session_state of this Session.  # noqa: E501
        :rtype: str
        """
        return self._session_state

    @session_state.setter
    def session_state(self, session_state):
        """Sets the session_state of this Session.


        :param session_state: The session_state of this Session.  # noqa: E501
        :type: str
        """

        self._session_state = session_state

    @property
    def session_uri(self):
        """Gets the session_uri of this Session.  # noqa: E501


        :return: The session_uri of this Session.  # noqa: E501
        :rtype: str
        """
        return self._session_uri

    @session_uri.setter
    def session_uri(self, session_uri):
        """Sets the session_uri of this Session.


        :param session_uri: The session_uri of this Session.  # noqa: E501
        :type: str
        """

        self._session_uri = session_uri

    @property
    def client_id(self):
        """Gets the client_id of this Session.  # noqa: E501


        :return: The client_id of this Session.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Session.


        :param client_id: The client_id of this Session.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def scopes(self):
        """Gets the scopes of this Session.  # noqa: E501


        :return: The scopes of this Session.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this Session.


        :param scopes: The scopes of this Session.  # noqa: E501
        :type: list[str]
        """

        self._scopes = scopes

    @property
    def scopes_optional(self):
        """Gets the scopes_optional of this Session.  # noqa: E501


        :return: The scopes_optional of this Session.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes_optional

    @scopes_optional.setter
    def scopes_optional(self, scopes_optional):
        """Sets the scopes_optional of this Session.


        :param scopes_optional: The scopes_optional of this Session.  # noqa: E501
        :type: list[str]
        """

        self._scopes_optional = scopes_optional

    @property
    def scopes_required(self):
        """Gets the scopes_required of this Session.  # noqa: E501


        :return: The scopes_required of this Session.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes_required

    @scopes_required.setter
    def scopes_required(self, scopes_required):
        """Sets the scopes_required of this Session.


        :param scopes_required: The scopes_required of this Session.  # noqa: E501
        :type: list[str]
        """

        self._scopes_required = scopes_required

    @property
    def scopes_signed(self):
        """Gets the scopes_signed of this Session.  # noqa: E501


        :return: The scopes_signed of this Session.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes_signed

    @scopes_signed.setter
    def scopes_signed(self, scopes_signed):
        """Sets the scopes_signed of this Session.


        :param scopes_signed: The scopes_signed of this Session.  # noqa: E501
        :type: list[str]
        """

        self._scopes_signed = scopes_signed

    @property
    def tokens_seen(self):
        """Gets the tokens_seen of this Session.  # noqa: E501


        :return: The tokens_seen of this Session.  # noqa: E501
        :rtype: list[str]
        """
        return self._tokens_seen

    @tokens_seen.setter
    def tokens_seen(self, tokens_seen):
        """Sets the tokens_seen of this Session.


        :param tokens_seen: The tokens_seen of this Session.  # noqa: E501
        :type: list[str]
        """

        self._tokens_seen = tokens_seen

    @property
    def scopes_seen(self):
        """Gets the scopes_seen of this Session.  # noqa: E501


        :return: The scopes_seen of this Session.  # noqa: E501
        :rtype: list[str]
        """
        return self._scopes_seen

    @scopes_seen.setter
    def scopes_seen(self, scopes_seen):
        """Sets the scopes_seen of this Session.


        :param scopes_seen: The scopes_seen of this Session.  # noqa: E501
        :type: list[str]
        """

        self._scopes_seen = scopes_seen

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this Session.  # noqa: E501


        :return: The redirect_uri of this Session.  # noqa: E501
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this Session.


        :param redirect_uri: The redirect_uri of this Session.  # noqa: E501
        :type: str
        """

        self._redirect_uri = redirect_uri

    @property
    def response_type(self):
        """Gets the response_type of this Session.  # noqa: E501


        :return: The response_type of this Session.  # noqa: E501
        :rtype: str
        """
        return self._response_type

    @response_type.setter
    def response_type(self, response_type):
        """Sets the response_type of this Session.


        :param response_type: The response_type of this Session.  # noqa: E501
        :type: str
        """

        self._response_type = response_type

    @property
    def response_mode(self):
        """Gets the response_mode of this Session.  # noqa: E501


        :return: The response_mode of this Session.  # noqa: E501
        :rtype: str
        """
        return self._response_mode

    @response_mode.setter
    def response_mode(self, response_mode):
        """Sets the response_mode of this Session.


        :param response_mode: The response_mode of this Session.  # noqa: E501
        :type: str
        """

        self._response_mode = response_mode

    @property
    def nonce(self):
        """Gets the nonce of this Session.  # noqa: E501


        :return: The nonce of this Session.  # noqa: E501
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this Session.


        :param nonce: The nonce of this Session.  # noqa: E501
        :type: str
        """

        self._nonce = nonce

    @property
    def created_at(self):
        """Gets the created_at of this Session.  # noqa: E501


        :return: The created_at of this Session.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Session.


        :param created_at: The created_at of this Session.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def connected_at(self):
        """Gets the connected_at of this Session.  # noqa: E501


        :return: The connected_at of this Session.  # noqa: E501
        :rtype: datetime
        """
        return self._connected_at

    @connected_at.setter
    def connected_at(self, connected_at):
        """Sets the connected_at of this Session.


        :param connected_at: The connected_at of this Session.  # noqa: E501
        :type: datetime
        """

        self._connected_at = connected_at

    @property
    def authenticated_at(self):
        """Gets the authenticated_at of this Session.  # noqa: E501


        :return: The authenticated_at of this Session.  # noqa: E501
        :rtype: datetime
        """
        return self._authenticated_at

    @authenticated_at.setter
    def authenticated_at(self, authenticated_at):
        """Sets the authenticated_at of this Session.


        :param authenticated_at: The authenticated_at of this Session.  # noqa: E501
        :type: datetime
        """

        self._authenticated_at = authenticated_at

    @property
    def concluded_at(self):
        """Gets the concluded_at of this Session.  # noqa: E501


        :return: The concluded_at of this Session.  # noqa: E501
        :rtype: datetime
        """
        return self._concluded_at

    @concluded_at.setter
    def concluded_at(self, concluded_at):
        """Sets the concluded_at of this Session.


        :param concluded_at: The concluded_at of this Session.  # noqa: E501
        :type: datetime
        """

        self._concluded_at = concluded_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this Session.  # noqa: E501


        :return: The deleted_at of this Session.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this Session.


        :param deleted_at: The deleted_at of this Session.  # noqa: E501
        :type: datetime
        """

        self._deleted_at = deleted_at

    @property
    def client_name(self):
        """Gets the client_name of this Session.  # noqa: E501


        :return: The client_name of this Session.  # noqa: E501
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this Session.


        :param client_name: The client_name of this Session.  # noqa: E501
        :type: str
        """

        self._client_name = client_name

    @property
    def client_uri(self):
        """Gets the client_uri of this Session.  # noqa: E501


        :return: The client_uri of this Session.  # noqa: E501
        :rtype: str
        """
        return self._client_uri

    @client_uri.setter
    def client_uri(self, client_uri):
        """Sets the client_uri of this Session.


        :param client_uri: The client_uri of this Session.  # noqa: E501
        :type: str
        """

        self._client_uri = client_uri

    @property
    def logo_uri(self):
        """Gets the logo_uri of this Session.  # noqa: E501


        :return: The logo_uri of this Session.  # noqa: E501
        :rtype: str
        """
        return self._logo_uri

    @logo_uri.setter
    def logo_uri(self, logo_uri):
        """Sets the logo_uri of this Session.


        :param logo_uri: The logo_uri of this Session.  # noqa: E501
        :type: str
        """

        self._logo_uri = logo_uri

    @property
    def policy_uri(self):
        """Gets the policy_uri of this Session.  # noqa: E501


        :return: The policy_uri of this Session.  # noqa: E501
        :rtype: str
        """
        return self._policy_uri

    @policy_uri.setter
    def policy_uri(self, policy_uri):
        """Sets the policy_uri of this Session.


        :param policy_uri: The policy_uri of this Session.  # noqa: E501
        :type: str
        """

        self._policy_uri = policy_uri

    @property
    def tos_uri(self):
        """Gets the tos_uri of this Session.  # noqa: E501


        :return: The tos_uri of this Session.  # noqa: E501
        :rtype: str
        """
        return self._tos_uri

    @tos_uri.setter
    def tos_uri(self, tos_uri):
        """Sets the tos_uri of this Session.


        :param tos_uri: The tos_uri of this Session.  # noqa: E501
        :type: str
        """

        self._tos_uri = tos_uri

    @property
    def contacts(self):
        """Gets the contacts of this Session.  # noqa: E501


        :return: The contacts of this Session.  # noqa: E501
        :rtype: list[str]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this Session.


        :param contacts: The contacts of this Session.  # noqa: E501
        :type: list[str]
        """

        self._contacts = contacts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Session):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
