# coding: utf-8

"""
    User Data API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserDataUpdate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email_verified': 'bool',
        'msisdn_verified': 'bool',
        'msisdn': 'str',
        'gender': 'str',
        'birth_date': 'date',
        'avatar': 'str',
        'country_code': 'str'
    }

    attribute_map = {
        'email_verified': 'email_verified',
        'msisdn_verified': 'msisdn_verified',
        'msisdn': 'msisdn',
        'gender': 'gender',
        'birth_date': 'birth_date',
        'avatar': 'avatar',
        'country_code': 'country_code'
    }

    def __init__(self, email_verified=None, msisdn_verified=None, msisdn=None, gender=None, birth_date=None, avatar=None, country_code=None):
        """
        UserDataUpdate - a model defined in Swagger
        """

        self._email_verified = None
        self._msisdn_verified = None
        self._msisdn = None
        self._gender = None
        self._birth_date = None
        self._avatar = None
        self._country_code = None

        if email_verified is not None:
          self.email_verified = email_verified
        if msisdn_verified is not None:
          self.msisdn_verified = msisdn_verified
        if msisdn is not None:
          self.msisdn = msisdn
        if gender is not None:
          self.gender = gender
        if birth_date is not None:
          self.birth_date = birth_date
        if avatar is not None:
          self.avatar = avatar
        if country_code is not None:
          self.country_code = country_code

    @property
    def email_verified(self):
        """
        Gets the email_verified of this UserDataUpdate.

        :return: The email_verified of this UserDataUpdate.
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified):
        """
        Sets the email_verified of this UserDataUpdate.

        :param email_verified: The email_verified of this UserDataUpdate.
        :type: bool
        """

        self._email_verified = email_verified

    @property
    def msisdn_verified(self):
        """
        Gets the msisdn_verified of this UserDataUpdate.

        :return: The msisdn_verified of this UserDataUpdate.
        :rtype: bool
        """
        return self._msisdn_verified

    @msisdn_verified.setter
    def msisdn_verified(self, msisdn_verified):
        """
        Sets the msisdn_verified of this UserDataUpdate.

        :param msisdn_verified: The msisdn_verified of this UserDataUpdate.
        :type: bool
        """

        self._msisdn_verified = msisdn_verified

    @property
    def msisdn(self):
        """
        Gets the msisdn of this UserDataUpdate.

        :return: The msisdn of this UserDataUpdate.
        :rtype: str
        """
        return self._msisdn

    @msisdn.setter
    def msisdn(self, msisdn):
        """
        Sets the msisdn of this UserDataUpdate.

        :param msisdn: The msisdn of this UserDataUpdate.
        :type: str
        """
        if msisdn is not None and len(msisdn) > 15:
            raise ValueError("Invalid value for `msisdn`, length must be less than or equal to `15`")

        self._msisdn = msisdn

    @property
    def gender(self):
        """
        Gets the gender of this UserDataUpdate.

        :return: The gender of this UserDataUpdate.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """
        Sets the gender of this UserDataUpdate.

        :param gender: The gender of this UserDataUpdate.
        :type: str
        """

        self._gender = gender

    @property
    def birth_date(self):
        """
        Gets the birth_date of this UserDataUpdate.

        :return: The birth_date of this UserDataUpdate.
        :rtype: date
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """
        Sets the birth_date of this UserDataUpdate.

        :param birth_date: The birth_date of this UserDataUpdate.
        :type: date
        """

        self._birth_date = birth_date

    @property
    def avatar(self):
        """
        Gets the avatar of this UserDataUpdate.

        :return: The avatar of this UserDataUpdate.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """
        Sets the avatar of this UserDataUpdate.

        :param avatar: The avatar of this UserDataUpdate.
        :type: str
        """

        self._avatar = avatar

    @property
    def country_code(self):
        """
        Gets the country_code of this UserDataUpdate.

        :return: The country_code of this UserDataUpdate.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """
        Sets the country_code of this UserDataUpdate.

        :param country_code: The country_code of this UserDataUpdate.
        :type: str
        """
        if country_code is not None and len(country_code) > 2:
            raise ValueError("Invalid value for `country_code`, length must be less than or equal to `2`")

        self._country_code = country_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UserDataUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
