# coding: utf-8

"""
    User Data API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UserDataApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def adminnote_create(self, **kwargs):  # noqa: E501
        """adminnote_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.adminnote_create(async=True)
        >>> result = thread.get()

        :param async bool
        :param AdminNoteCreate data:
        :return: AdminNote
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.adminnote_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.adminnote_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def adminnote_create_with_http_info(self, **kwargs):  # noqa: E501
        """adminnote_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.adminnote_create_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param AdminNoteCreate data:
        :return: AdminNote
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adminnote_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/adminnotes/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminNote',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adminnote_delete(self, user_id, creator_id, created_at, **kwargs):  # noqa: E501
        """adminnote_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.adminnote_delete(user_id, creator_id, created_at, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :param str creator_id: The creator_id (required)
        :param datetime created_at: The created_at value (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.adminnote_delete_with_http_info(user_id, creator_id, created_at, **kwargs)  # noqa: E501
        else:
            (data) = self.adminnote_delete_with_http_info(user_id, creator_id, created_at, **kwargs)  # noqa: E501
            return data

    def adminnote_delete_with_http_info(self, user_id, creator_id, created_at, **kwargs):  # noqa: E501
        """adminnote_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.adminnote_delete_with_http_info(user_id, creator_id, created_at, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :param str creator_id: The creator_id (required)
        :param datetime created_at: The created_at value (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'creator_id', 'created_at']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adminnote_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `adminnote_delete`")  # noqa: E501
        # verify the required parameter 'creator_id' is set
        if ('creator_id' not in params or
                params['creator_id'] is None):
            raise ValueError("Missing the required parameter `creator_id` when calling `adminnote_delete`")  # noqa: E501
        # verify the required parameter 'created_at' is set
        if ('created_at' not in params or
                params['created_at'] is None):
            raise ValueError("Missing the required parameter `created_at` when calling `adminnote_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'creator_id' in params:
            path_params['creator_id'] = params['creator_id']  # noqa: E501
        if 'created_at' in params:
            path_params['created_at'] = params['created_at']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/adminnotes/{user_id}/{creator_id}/{created_at}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adminnote_list(self, **kwargs):  # noqa: E501
        """adminnote_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.adminnote_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param str user_id: An optional query parameter to filter by user_id
        :param str creator_id: An optional query parameter to filter by creator (a user_id)
        :return: list[AdminNote]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.adminnote_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.adminnote_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def adminnote_list_with_http_info(self, **kwargs):  # noqa: E501
        """adminnote_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.adminnote_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param str user_id: An optional query parameter to filter by user_id
        :param str creator_id: An optional query parameter to filter by creator (a user_id)
        :return: list[AdminNote]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'user_id', 'creator_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adminnote_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `adminnote_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `adminnote_list`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `adminnote_list`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'creator_id' in params:
            query_params.append(('creator_id', params['creator_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/adminnotes/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AdminNote]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adminnote_read(self, user_id, creator_id, created_at, **kwargs):  # noqa: E501
        """adminnote_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.adminnote_read(user_id, creator_id, created_at, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :param str creator_id: The creator_id (required)
        :param datetime created_at: The created_at value (required)
        :return: AdminNote
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.adminnote_read_with_http_info(user_id, creator_id, created_at, **kwargs)  # noqa: E501
        else:
            (data) = self.adminnote_read_with_http_info(user_id, creator_id, created_at, **kwargs)  # noqa: E501
            return data

    def adminnote_read_with_http_info(self, user_id, creator_id, created_at, **kwargs):  # noqa: E501
        """adminnote_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.adminnote_read_with_http_info(user_id, creator_id, created_at, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :param str creator_id: The creator_id (required)
        :param datetime created_at: The created_at value (required)
        :return: AdminNote
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'creator_id', 'created_at']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adminnote_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `adminnote_read`")  # noqa: E501
        # verify the required parameter 'creator_id' is set
        if ('creator_id' not in params or
                params['creator_id'] is None):
            raise ValueError("Missing the required parameter `creator_id` when calling `adminnote_read`")  # noqa: E501
        # verify the required parameter 'created_at' is set
        if ('created_at' not in params or
                params['created_at'] is None):
            raise ValueError("Missing the required parameter `created_at` when calling `adminnote_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'creator_id' in params:
            path_params['creator_id'] = params['creator_id']  # noqa: E501
        if 'created_at' in params:
            path_params['created_at'] = params['created_at']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/adminnotes/{user_id}/{creator_id}/{created_at}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminNote',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def adminnote_update(self, user_id, creator_id, created_at, **kwargs):  # noqa: E501
        """adminnote_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.adminnote_update(user_id, creator_id, created_at, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :param str creator_id: The creator_id (required)
        :param datetime created_at: The created_at value (required)
        :param AdminNoteUpdate data:
        :return: AdminNote
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.adminnote_update_with_http_info(user_id, creator_id, created_at, **kwargs)  # noqa: E501
        else:
            (data) = self.adminnote_update_with_http_info(user_id, creator_id, created_at, **kwargs)  # noqa: E501
            return data

    def adminnote_update_with_http_info(self, user_id, creator_id, created_at, **kwargs):  # noqa: E501
        """adminnote_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.adminnote_update_with_http_info(user_id, creator_id, created_at, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :param str creator_id: The creator_id (required)
        :param datetime created_at: The created_at value (required)
        :param AdminNoteUpdate data:
        :return: AdminNote
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'creator_id', 'created_at', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method adminnote_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `adminnote_update`")  # noqa: E501
        # verify the required parameter 'creator_id' is set
        if ('creator_id' not in params or
                params['creator_id'] is None):
            raise ValueError("Missing the required parameter `creator_id` when calling `adminnote_update`")  # noqa: E501
        # verify the required parameter 'created_at' is set
        if ('created_at' not in params or
                params['created_at'] is None):
            raise ValueError("Missing the required parameter `created_at` when calling `adminnote_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'creator_id' in params:
            path_params['creator_id'] = params['creator_id']  # noqa: E501
        if 'created_at' in params:
            path_params['created_at'] = params['created_at']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/adminnotes/{user_id}/{creator_id}/{created_at}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AdminNote',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sitedataschema_create(self, **kwargs):  # noqa: E501
        """sitedataschema_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sitedataschema_create(async=True)
        >>> result = thread.get()

        :param async bool
        :param SiteDataSchemaCreate data:
        :return: SiteDataSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sitedataschema_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sitedataschema_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def sitedataschema_create_with_http_info(self, **kwargs):  # noqa: E501
        """sitedataschema_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sitedataschema_create_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param SiteDataSchemaCreate data:
        :return: SiteDataSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sitedataschema_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/sitedataschemas/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteDataSchema',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sitedataschema_delete(self, site_id, **kwargs):  # noqa: E501
        """sitedataschema_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sitedataschema_delete(site_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int site_id: A unique integer value identifying the site. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sitedataschema_delete_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sitedataschema_delete_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def sitedataschema_delete_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """sitedataschema_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sitedataschema_delete_with_http_info(site_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int site_id: A unique integer value identifying the site. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sitedataschema_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `sitedataschema_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['site_id'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/sitedataschemas/{site_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sitedataschema_list(self, **kwargs):  # noqa: E501
        """sitedataschema_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sitedataschema_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :return: list[SiteDataSchema]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sitedataschema_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sitedataschema_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def sitedataschema_list_with_http_info(self, **kwargs):  # noqa: E501
        """sitedataschema_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sitedataschema_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :return: list[SiteDataSchema]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sitedataschema_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `sitedataschema_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `sitedataschema_list`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `sitedataschema_list`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/sitedataschemas/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SiteDataSchema]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sitedataschema_read(self, site_id, **kwargs):  # noqa: E501
        """sitedataschema_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sitedataschema_read(site_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int site_id: A unique integer value identifying the site. (required)
        :return: SiteDataSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sitedataschema_read_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sitedataschema_read_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def sitedataschema_read_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """sitedataschema_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sitedataschema_read_with_http_info(site_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int site_id: A unique integer value identifying the site. (required)
        :return: SiteDataSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sitedataschema_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `sitedataschema_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['site_id'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/sitedataschemas/{site_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteDataSchema',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sitedataschema_update(self, site_id, **kwargs):  # noqa: E501
        """sitedataschema_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sitedataschema_update(site_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int site_id: A unique integer value identifying the site. (required)
        :param SiteDataSchemaUpdate data:
        :return: SiteDataSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sitedataschema_update_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sitedataschema_update_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def sitedataschema_update_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """sitedataschema_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sitedataschema_update_with_http_info(site_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int site_id: A unique integer value identifying the site. (required)
        :param SiteDataSchemaUpdate data:
        :return: SiteDataSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sitedataschema_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `sitedataschema_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['site_id'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/sitedataschemas/{site_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteDataSchema',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def usersitedata_create(self, **kwargs):  # noqa: E501
        """usersitedata_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.usersitedata_create(async=True)
        >>> result = thread.get()

        :param async bool
        :param UserSiteDataCreate data:
        :return: UserSiteData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.usersitedata_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.usersitedata_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def usersitedata_create_with_http_info(self, **kwargs):  # noqa: E501
        """usersitedata_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.usersitedata_create_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param UserSiteDataCreate data:
        :return: UserSiteData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usersitedata_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/usersitedata/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserSiteData',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def usersitedata_delete(self, user_id, site_id, **kwargs):  # noqa: E501
        """usersitedata_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.usersitedata_delete(user_id, site_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :param int site_id: A unique integer value identifying the site. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.usersitedata_delete_with_http_info(user_id, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.usersitedata_delete_with_http_info(user_id, site_id, **kwargs)  # noqa: E501
            return data

    def usersitedata_delete_with_http_info(self, user_id, site_id, **kwargs):  # noqa: E501
        """usersitedata_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.usersitedata_delete_with_http_info(user_id, site_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :param int site_id: A unique integer value identifying the site. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'site_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usersitedata_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `usersitedata_delete`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `usersitedata_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'site_id' in params:
            path_params['site_id'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/usersitedata/{user_id}/{site_id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def usersitedata_list(self, **kwargs):  # noqa: E501
        """usersitedata_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.usersitedata_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param str user_id: An optional query parameter to filter by user_id
        :param int site_id: An optional query parameter to filter by site_id
        :return: list[UserSiteData]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.usersitedata_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.usersitedata_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def usersitedata_list_with_http_info(self, **kwargs):  # noqa: E501
        """usersitedata_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.usersitedata_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param str user_id: An optional query parameter to filter by user_id
        :param int site_id: An optional query parameter to filter by site_id
        :return: list[UserSiteData]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'user_id', 'site_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usersitedata_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `usersitedata_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `usersitedata_list`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `usersitedata_list`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/usersitedata/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserSiteData]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def usersitedata_read(self, user_id, site_id, **kwargs):  # noqa: E501
        """usersitedata_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.usersitedata_read(user_id, site_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :param int site_id: A unique integer value identifying the site. (required)
        :return: UserSiteData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.usersitedata_read_with_http_info(user_id, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.usersitedata_read_with_http_info(user_id, site_id, **kwargs)  # noqa: E501
            return data

    def usersitedata_read_with_http_info(self, user_id, site_id, **kwargs):  # noqa: E501
        """usersitedata_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.usersitedata_read_with_http_info(user_id, site_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :param int site_id: A unique integer value identifying the site. (required)
        :return: UserSiteData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'site_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usersitedata_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `usersitedata_read`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `usersitedata_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'site_id' in params:
            path_params['site_id'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/usersitedata/{user_id}/{site_id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserSiteData',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def usersitedata_update(self, user_id, site_id, **kwargs):  # noqa: E501
        """usersitedata_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.usersitedata_update(user_id, site_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :param int site_id: A unique integer value identifying the site. (required)
        :param UserSiteDataUpdate data:
        :return: UserSiteData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.usersitedata_update_with_http_info(user_id, site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.usersitedata_update_with_http_info(user_id, site_id, **kwargs)  # noqa: E501
            return data

    def usersitedata_update_with_http_info(self, user_id, site_id, **kwargs):  # noqa: E501
        """usersitedata_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.usersitedata_update_with_http_info(user_id, site_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :param int site_id: A unique integer value identifying the site. (required)
        :param UserSiteDataUpdate data:
        :return: UserSiteData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'site_id', 'data']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method usersitedata_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `usersitedata_update`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `usersitedata_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'site_id' in params:
            path_params['site_id'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/usersitedata/{user_id}/{site_id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserSiteData',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
