# coding: utf-8

"""
    Authentication Service API

    This is the API that will be exposed by the Authentication Service.  The Authentication service facilitates user registration and login via web-based flows as defined for the OpenID Connect specification. 

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Content(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'client_secret': 'str',
        'grant_type': 'str',
        'code': 'str',
        'redirect_uri': 'str'
    }

    attribute_map = {
        'client_id': 'client_id',
        'client_secret': 'client_secret',
        'grant_type': 'grant_type',
        'code': 'code',
        'redirect_uri': 'redirect_uri'
    }

    def __init__(self, client_id=None, client_secret=None, grant_type=None, code=None, redirect_uri=None):
        """
        Content - a model defined in Swagger
        """

        self._client_id = None
        self._client_secret = None
        self._grant_type = None
        self._code = None
        self._redirect_uri = None

        self.client_id = client_id
        if client_secret is not None:
          self.client_secret = client_secret
        if grant_type is not None:
          self.grant_type = grant_type
        if code is not None:
          self.code = code
        if redirect_uri is not None:
          self.redirect_uri = redirect_uri

    @property
    def client_id(self):
        """
        Gets the client_id of this Content.
        The registered client ID. 

        :return: The client_id of this Content.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """
        Sets the client_id of this Content.
        The registered client ID. 

        :param client_id: The client_id of this Content.
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def client_secret(self):
        """
        Gets the client_secret of this Content.
        The registered client ID secret. 

        :return: The client_secret of this Content.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """
        Sets the client_secret of this Content.
        The registered client ID secret. 

        :param client_secret: The client_secret of this Content.
        :type: str
        """

        self._client_secret = client_secret

    @property
    def grant_type(self):
        """
        Gets the grant_type of this Content.
        The authorization grant type, must be `authorization_code`. 

        :return: The grant_type of this Content.
        :rtype: str
        """
        return self._grant_type

    @grant_type.setter
    def grant_type(self, grant_type):
        """
        Sets the grant_type of this Content.
        The authorization grant type, must be `authorization_code`. 

        :param grant_type: The grant_type of this Content.
        :type: str
        """

        self._grant_type = grant_type

    @property
    def code(self):
        """
        Gets the code of this Content.
        The authorization code previously obtained from the Authentication endpoint. 

        :return: The code of this Content.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this Content.
        The authorization code previously obtained from the Authentication endpoint. 

        :param code: The code of this Content.
        :type: str
        """

        self._code = code

    @property
    def redirect_uri(self):
        """
        Gets the redirect_uri of this Content.
        The redirect URL that was used previously with the Authentication endpoint. 

        :return: The redirect_uri of this Content.
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """
        Sets the redirect_uri of this Content.
        The redirect URL that was used previously with the Authentication endpoint. 

        :param redirect_uri: The redirect_uri of this Content.
        :type: str
        """

        self._redirect_uri = redirect_uri

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Content):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
