# coding: utf-8

"""
    Authentication Service API

    This is the API that will be exposed by the Authentication Service.  The Authentication service facilitates user registration and login via web-based flows as defined for the OpenID Connect specification. 

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ExperimentalApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def authorize(self, client_id, response_type, scope, redirect_uri, state, **kwargs):
        """
        Authenticate a user
        Example: ``` GET https://localhost:8000/authorize?client_id=<your-client-id>&response_type=code+id_token&scope=openid+email&redirect_uri=<your-redirect-uri>&state=0123456789 ``` This endpoint is compatible with OpenID Connect and also supports the POST method, in which case the parameters are passed as a form post. See also:   - [OAuth 2.0 Authorization Endpoint](http://tools.ietf.org/html/rfc6749#section-3.1)   - [OIDC Authentication request](http://openid.net/specs/openid-connect-core-1_0.html#AuthRequest)   - [OIDC Successful Authentication response](http://openid.net/specs/openid-connect-core-1_0.html#AuthResponse)   - [OIDC Error Authentication response](http://openid.net/specs/openid-connect-core-1_0.html#AuthError) 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.authorize(client_id, response_type, scope, redirect_uri, state, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: A client ID obtained from the [Dashboard](https://localhost:8000/admin/).  (required)
        :param str response_type: The OIDC response type to use for this authentication flow. Valid choices are `code`, `id_token`, `token`, `token id_token`, `code id_token` `code token` and `code token id_token`, but a client can be configured with a more restricted set.  (required)
        :param str scope: The space-separated identity claims to request from the end-user. Always include `openid` as a scope for compatibility with OIDC.  (required)
        :param str redirect_uri: The location to redirect to after (un)successful authentication. See OIDC for the parameters passed in the query string (`response_mode=query`) or as fragments (`response_mode=fragment`). This must be one of the registered redirect URLs.  (required)
        :param str state: An opaque string that will be passed back to the redirect URL and therefore can be used to communicate client side state and prevent CSRF attacks.  (required)
        :param str response_mode: Whether to append parameters to the redirect URL in the query string (`query`) or as fragments (`fragment`). This option usually has a sensible default for each of the response types. 
        :param str nonce: An nonce provided by the client that will be included in any ID Token generated for this session. Clients should use the nonce to mitigate replay attacks. 
        :param str display: The authentication display mode, which can be one of `page`, `popup` or `modal`. Defaults to `page`. 
        :param str prompt: Space-delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for re-authentication and consent. The supported values are: `none`, `login`, `consent`. If `consent` the end-user is asked to (re)confirm what claims they share. Use `none` to check for an active session. 
        :param int max_age: Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated. 
        :param str ui_locales: Specifies the preferred language to use on the authorization page, as a space-separated list of BCP47 language tags. Ignored at the moment. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.authorize_with_http_info(client_id, response_type, scope, redirect_uri, state, **kwargs)
        else:
            (data) = self.authorize_with_http_info(client_id, response_type, scope, redirect_uri, state, **kwargs)
            return data

    def authorize_with_http_info(self, client_id, response_type, scope, redirect_uri, state, **kwargs):
        """
        Authenticate a user
        Example: ``` GET https://localhost:8000/authorize?client_id=<your-client-id>&response_type=code+id_token&scope=openid+email&redirect_uri=<your-redirect-uri>&state=0123456789 ``` This endpoint is compatible with OpenID Connect and also supports the POST method, in which case the parameters are passed as a form post. See also:   - [OAuth 2.0 Authorization Endpoint](http://tools.ietf.org/html/rfc6749#section-3.1)   - [OIDC Authentication request](http://openid.net/specs/openid-connect-core-1_0.html#AuthRequest)   - [OIDC Successful Authentication response](http://openid.net/specs/openid-connect-core-1_0.html#AuthResponse)   - [OIDC Error Authentication response](http://openid.net/specs/openid-connect-core-1_0.html#AuthError) 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.authorize_with_http_info(client_id, response_type, scope, redirect_uri, state, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str client_id: A client ID obtained from the [Dashboard](https://localhost:8000/admin/).  (required)
        :param str response_type: The OIDC response type to use for this authentication flow. Valid choices are `code`, `id_token`, `token`, `token id_token`, `code id_token` `code token` and `code token id_token`, but a client can be configured with a more restricted set.  (required)
        :param str scope: The space-separated identity claims to request from the end-user. Always include `openid` as a scope for compatibility with OIDC.  (required)
        :param str redirect_uri: The location to redirect to after (un)successful authentication. See OIDC for the parameters passed in the query string (`response_mode=query`) or as fragments (`response_mode=fragment`). This must be one of the registered redirect URLs.  (required)
        :param str state: An opaque string that will be passed back to the redirect URL and therefore can be used to communicate client side state and prevent CSRF attacks.  (required)
        :param str response_mode: Whether to append parameters to the redirect URL in the query string (`query`) or as fragments (`fragment`). This option usually has a sensible default for each of the response types. 
        :param str nonce: An nonce provided by the client that will be included in any ID Token generated for this session. Clients should use the nonce to mitigate replay attacks. 
        :param str display: The authentication display mode, which can be one of `page`, `popup` or `modal`. Defaults to `page`. 
        :param str prompt: Space-delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for re-authentication and consent. The supported values are: `none`, `login`, `consent`. If `consent` the end-user is asked to (re)confirm what claims they share. Use `none` to check for an active session. 
        :param int max_age: Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated. 
        :param str ui_locales: Specifies the preferred language to use on the authorization page, as a space-separated list of BCP47 language tags. Ignored at the moment. 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'response_type', 'scope', 'redirect_uri', 'state', 'response_mode', 'nonce', 'display', 'prompt', 'max_age', 'ui_locales']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method authorize" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params) or (params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `authorize`")
        # verify the required parameter 'response_type' is set
        if ('response_type' not in params) or (params['response_type'] is None):
            raise ValueError("Missing the required parameter `response_type` when calling `authorize`")
        # verify the required parameter 'scope' is set
        if ('scope' not in params) or (params['scope'] is None):
            raise ValueError("Missing the required parameter `scope` when calling `authorize`")
        # verify the required parameter 'redirect_uri' is set
        if ('redirect_uri' not in params) or (params['redirect_uri'] is None):
            raise ValueError("Missing the required parameter `redirect_uri` when calling `authorize`")
        # verify the required parameter 'state' is set
        if ('state' not in params) or (params['state'] is None):
            raise ValueError("Missing the required parameter `state` when calling `authorize`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'client_id' in params:
            query_params.append(('client_id', params['client_id']))
        if 'response_type' in params:
            query_params.append(('response_type', params['response_type']))
        if 'scope' in params:
            query_params.append(('scope', params['scope']))
        if 'redirect_uri' in params:
            query_params.append(('redirect_uri', params['redirect_uri']))
        if 'state' in params:
            query_params.append(('state', params['state']))
        if 'response_mode' in params:
            query_params.append(('response_mode', params['response_mode']))
        if 'nonce' in params:
            query_params.append(('nonce', params['nonce']))
        if 'display' in params:
            query_params.append(('display', params['display']))
        if 'prompt' in params:
            query_params.append(('prompt', params['prompt']))
        if 'max_age' in params:
            query_params.append(('max_age', params['max_age']))
        if 'ui_locales' in params:
            query_params.append(('ui_locales', params['ui_locales']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api('/openid/authorize', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def token(self, **kwargs):
        """
        Obtain an ID Token
        Exchange an authorization code for an ID Token or Access Token. This endpoint supports both `client_secret_post` and `client_secret_basic` authentication methods, as specified by the client's `token_endpoint_auth_method`. See also:   - [OIDC Token Endpoint](http://openid.net/specs/openid-connect-core-1_0.html#TokenRequest)   - [OIDC Successful Token response](http://openid.net/specs/openid-connect-core-1_0.html#TokenResponse)   - [OIDC Token Error response](http://openid.net/specs/openid-connect-core-1_0.html#TokenError) 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.token(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: HTTP Basic authorization header. 
        :param Content content:
        :return: Token
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.token_with_http_info(**kwargs)
        else:
            (data) = self.token_with_http_info(**kwargs)
            return data

    def token_with_http_info(self, **kwargs):
        """
        Obtain an ID Token
        Exchange an authorization code for an ID Token or Access Token. This endpoint supports both `client_secret_post` and `client_secret_basic` authentication methods, as specified by the client's `token_endpoint_auth_method`. See also:   - [OIDC Token Endpoint](http://openid.net/specs/openid-connect-core-1_0.html#TokenRequest)   - [OIDC Successful Token response](http://openid.net/specs/openid-connect-core-1_0.html#TokenResponse)   - [OIDC Token Error response](http://openid.net/specs/openid-connect-core-1_0.html#TokenError) 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.token_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str authorization: HTTP Basic authorization header. 
        :param Content content:
        :return: Token
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['authorization', 'content']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method token" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'content' in params:
            body_params = params['content']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['APIKeyHeader']

        return self.api_client.call_api('/openid/token', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Token',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def user_info(self, **kwargs):
        """
        Retrieve their user profile
        Use this endpoint to retrieve a user's profile in case you've not already obtained enough details from the ID Token via the Token Endpoint.  See also:  - [OIDC UserInfo endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo) 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: UserInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.user_info_with_http_info(**kwargs)
        else:
            (data) = self.user_info_with_http_info(**kwargs)
            return data

    def user_info_with_http_info(self, **kwargs):
        """
        Retrieve their user profile
        Use this endpoint to retrieve a user's profile in case you've not already obtained enough details from the ID Token via the Token Endpoint.  See also:  - [OIDC UserInfo endpoint](http://openid.net/specs/openid-connect-core-1_0.html#UserInfo) 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.user_info_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: UserInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = ['oauth_code', 'oauth_implicit']

        return self.api_client.call_api('/openid/userinfo', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='UserInfo',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
