# coding: utf-8

"""
    Authentication Service API

    This is the API that will be exposed by the Authentication Service.  The Authentication Service facilitates user registration and login via web-based flows as defined for the OpenID Connect specification.   # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.address import Address  # noqa: F401,E501


class UserInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sub': 'str',
        'name': 'str',
        'given_name': 'str',
        'family_name': 'str',
        'email': 'str',
        'email_verified': 'bool',
        'phone_number': 'str',
        'phone_number_verified': 'bool',
        'address': 'Address'
    }

    attribute_map = {
        'sub': 'sub',
        'name': 'name',
        'given_name': 'given_name',
        'family_name': 'family_name',
        'email': 'email',
        'email_verified': 'email_verified',
        'phone_number': 'phone_number',
        'phone_number_verified': 'phone_number_verified',
        'address': 'address'
    }

    def __init__(self, sub=None, name=None, given_name=None, family_name=None, email=None, email_verified=None, phone_number=None, phone_number_verified=None, address=None):  # noqa: E501
        """UserInfo - a model defined in Swagger"""  # noqa: E501

        self._sub = None
        self._name = None
        self._given_name = None
        self._family_name = None
        self._email = None
        self._email_verified = None
        self._phone_number = None
        self._phone_number_verified = None
        self._address = None
        self.discriminator = None

        self.sub = sub
        if name is not None:
            self.name = name
        if given_name is not None:
            self.given_name = given_name
        if family_name is not None:
            self.family_name = family_name
        if email is not None:
            self.email = email
        if email_verified is not None:
            self.email_verified = email_verified
        if phone_number is not None:
            self.phone_number = phone_number
        if phone_number_verified is not None:
            self.phone_number_verified = phone_number_verified
        if address is not None:
            self.address = address

    @property
    def sub(self):
        """Gets the sub of this UserInfo.  # noqa: E501


        :return: The sub of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._sub

    @sub.setter
    def sub(self, sub):
        """Sets the sub of this UserInfo.


        :param sub: The sub of this UserInfo.  # noqa: E501
        :type: str
        """
        if sub is None:
            raise ValueError("Invalid value for `sub`, must not be `None`")  # noqa: E501

        self._sub = sub

    @property
    def name(self):
        """Gets the name of this UserInfo.  # noqa: E501


        :return: The name of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserInfo.


        :param name: The name of this UserInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def given_name(self):
        """Gets the given_name of this UserInfo.  # noqa: E501


        :return: The given_name of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this UserInfo.


        :param given_name: The given_name of this UserInfo.  # noqa: E501
        :type: str
        """

        self._given_name = given_name

    @property
    def family_name(self):
        """Gets the family_name of this UserInfo.  # noqa: E501


        :return: The family_name of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this UserInfo.


        :param family_name: The family_name of this UserInfo.  # noqa: E501
        :type: str
        """

        self._family_name = family_name

    @property
    def email(self):
        """Gets the email of this UserInfo.  # noqa: E501


        :return: The email of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserInfo.


        :param email: The email of this UserInfo.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def email_verified(self):
        """Gets the email_verified of this UserInfo.  # noqa: E501


        :return: The email_verified of this UserInfo.  # noqa: E501
        :rtype: bool
        """
        return self._email_verified

    @email_verified.setter
    def email_verified(self, email_verified):
        """Sets the email_verified of this UserInfo.


        :param email_verified: The email_verified of this UserInfo.  # noqa: E501
        :type: bool
        """

        self._email_verified = email_verified

    @property
    def phone_number(self):
        """Gets the phone_number of this UserInfo.  # noqa: E501


        :return: The phone_number of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this UserInfo.


        :param phone_number: The phone_number of this UserInfo.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def phone_number_verified(self):
        """Gets the phone_number_verified of this UserInfo.  # noqa: E501


        :return: The phone_number_verified of this UserInfo.  # noqa: E501
        :rtype: bool
        """
        return self._phone_number_verified

    @phone_number_verified.setter
    def phone_number_verified(self, phone_number_verified):
        """Sets the phone_number_verified of this UserInfo.


        :param phone_number_verified: The phone_number_verified of this UserInfo.  # noqa: E501
        :type: bool
        """

        self._phone_number_verified = phone_number_verified

    @property
    def address(self):
        """Gets the address of this UserInfo.  # noqa: E501


        :return: The address of this UserInfo.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this UserInfo.


        :param address: The address of this UserInfo.  # noqa: E501
        :type: Address
        """

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
