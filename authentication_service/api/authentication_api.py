# coding: utf-8

"""
    Authentication Service API

    This is the API that will be exposed by the Authentication Service. The Authentication Service facilitates user registration and login via web-based flows as defined for the OpenID Connect specification.   # noqa: E501

    OpenAPI spec version: 1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from authentication_service.api_client import ApiClient


class AuthenticationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def client_list(self, **kwargs):  # noqa: E501
        """client_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.client_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param list[int] client_ids: An optional list of client ids
        :param str client_token_id: An optional client id to filter on. This is not the primary key.
        :return: list[Client]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.client_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.client_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def client_list_with_http_info(self, **kwargs):  # noqa: E501
        """client_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.client_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param list[int] client_ids: An optional list of client ids
        :param str client_token_id: An optional client id to filter on. This is not the primary key.
        :return: list[Client]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'client_ids', 'client_token_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `client_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `client_list`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `client_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if ('client_ids' in params and
                len(params['client_ids']) < 1):
            raise ValueError("Invalid value for parameter `client_ids` when calling `client_list`, number of items must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'client_ids' in params:
            query_params.append(('client_ids', params['client_ids']))  # noqa: E501
            collection_formats['client_ids'] = 'csv'  # noqa: E501
        if 'client_token_id' in params:
            query_params.append(('client_token_id', params['client_token_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/clients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Client]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def client_read(self, client_id, **kwargs):  # noqa: E501
        """client_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.client_read(client_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_id: A string value identifying the client (required)
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.client_read_with_http_info(client_id, **kwargs)  # noqa: E501
        else:
            (data) = self.client_read_with_http_info(client_id, **kwargs)  # noqa: E501
            return data

    def client_read_with_http_info(self, client_id, **kwargs):  # noqa: E501
        """client_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.client_read_with_http_info(client_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str client_id: A string value identifying the client (required)
        :return: Client
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `client_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_id' in params:
            path_params['client_id'] = params['client_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/clients/{client_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Client',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def country_list(self, **kwargs):  # noqa: E501
        """country_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.country_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param list[str] country_codes: An optional list of country codes
        :return: list[Country]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.country_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.country_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def country_list_with_http_info(self, **kwargs):  # noqa: E501
        """country_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.country_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param list[str] country_codes: An optional list of country codes
        :return: list[Country]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'country_codes']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method country_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `country_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `country_list`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `country_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if ('country_codes' in params and
                len(params['country_codes']) < 1):
            raise ValueError("Invalid value for parameter `country_codes` when calling `country_list`, number of items must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'country_codes' in params:
            query_params.append(('country_codes', params['country_codes']))  # noqa: E501
            collection_formats['country_codes'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/countries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Country]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def country_read(self, country_code, **kwargs):  # noqa: E501
        """country_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.country_read(country_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str country_code: A string value identifying the country (required)
        :return: Country
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.country_read_with_http_info(country_code, **kwargs)  # noqa: E501
        else:
            (data) = self.country_read_with_http_info(country_code, **kwargs)  # noqa: E501
            return data

    def country_read_with_http_info(self, country_code, **kwargs):  # noqa: E501
        """country_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.country_read_with_http_info(country_code, async=True)
        >>> result = thread.get()

        :param async bool
        :param str country_code: A string value identifying the country (required)
        :return: Country
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['country_code']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method country_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'country_code' is set
        if ('country_code' not in params or
                params['country_code'] is None):
            raise ValueError("Missing the required parameter `country_code` when calling `country_read`")  # noqa: E501

        if ('country_code' in params and
                len(params['country_code']) > 2):
            raise ValueError("Invalid value for parameter `country_code` when calling `country_read`, length must be less than or equal to `2`")  # noqa: E501
        if ('country_code' in params and
                len(params['country_code']) < 2):
            raise ValueError("Invalid value for parameter `country_code` when calling `country_read`, length must be greater than or equal to `2`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'country_code' in params:
            path_params['country_code'] = params['country_code']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/countries/{country_code}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Country',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organisation_create(self, **kwargs):  # noqa: E501
        """organisation_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organisation_create(async=True)
        >>> result = thread.get()

        :param async bool
        :param OrganisationCreate organisation_create:
        :return: Organisation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organisation_create_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.organisation_create_with_http_info(**kwargs)  # noqa: E501
            return data

    def organisation_create_with_http_info(self, **kwargs):  # noqa: E501
        """organisation_create  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organisation_create_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param OrganisationCreate organisation_create:
        :return: Organisation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organisation_create']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organisation_create" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'organisation_create' in params:
            body_params = params['organisation_create']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/organisations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Organisation',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organisation_delete(self, organisation_id, **kwargs):  # noqa: E501
        """organisation_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organisation_delete(organisation_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int organisation_id: An integer identifying an organisation a user belongs to (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organisation_delete_with_http_info(organisation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.organisation_delete_with_http_info(organisation_id, **kwargs)  # noqa: E501
            return data

    def organisation_delete_with_http_info(self, organisation_id, **kwargs):  # noqa: E501
        """organisation_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organisation_delete_with_http_info(organisation_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int organisation_id: An integer identifying an organisation a user belongs to (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organisation_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organisation_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organisation_id' is set
        if ('organisation_id' not in params or
                params['organisation_id'] is None):
            raise ValueError("Missing the required parameter `organisation_id` when calling `organisation_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organisation_id' in params:
            path_params['organisation_id'] = params['organisation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/organisations/{organisation_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organisation_list(self, **kwargs):  # noqa: E501
        """organisation_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organisation_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param list[int] organisation_ids: An optional list of organisation ids
        :return: list[Organisation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organisation_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.organisation_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def organisation_list_with_http_info(self, **kwargs):  # noqa: E501
        """organisation_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organisation_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param list[int] organisation_ids: An optional list of organisation ids
        :return: list[Organisation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'organisation_ids']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organisation_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `organisation_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `organisation_list`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `organisation_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if ('organisation_ids' in params and
                len(params['organisation_ids']) < 1):
            raise ValueError("Invalid value for parameter `organisation_ids` when calling `organisation_list`, number of items must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'organisation_ids' in params:
            query_params.append(('organisation_ids', params['organisation_ids']))  # noqa: E501
            collection_formats['organisation_ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/organisations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Organisation]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organisation_read(self, organisation_id, **kwargs):  # noqa: E501
        """organisation_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organisation_read(organisation_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int organisation_id: An integer identifying an organisation a user belongs to (required)
        :return: Organisation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organisation_read_with_http_info(organisation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.organisation_read_with_http_info(organisation_id, **kwargs)  # noqa: E501
            return data

    def organisation_read_with_http_info(self, organisation_id, **kwargs):  # noqa: E501
        """organisation_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organisation_read_with_http_info(organisation_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int organisation_id: An integer identifying an organisation a user belongs to (required)
        :return: Organisation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organisation_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organisation_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organisation_id' is set
        if ('organisation_id' not in params or
                params['organisation_id'] is None):
            raise ValueError("Missing the required parameter `organisation_id` when calling `organisation_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organisation_id' in params:
            path_params['organisation_id'] = params['organisation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/organisations/{organisation_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Organisation',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def organisation_update(self, organisation_id, **kwargs):  # noqa: E501
        """organisation_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organisation_update(organisation_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int organisation_id: An integer identifying an organisation a user belongs to (required)
        :param OrganisationUpdate organisation_update:
        :return: Organisation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.organisation_update_with_http_info(organisation_id, **kwargs)  # noqa: E501
        else:
            (data) = self.organisation_update_with_http_info(organisation_id, **kwargs)  # noqa: E501
            return data

    def organisation_update_with_http_info(self, organisation_id, **kwargs):  # noqa: E501
        """organisation_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.organisation_update_with_http_info(organisation_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int organisation_id: An integer identifying an organisation a user belongs to (required)
        :param OrganisationUpdate organisation_update:
        :return: Organisation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organisation_id', 'organisation_update']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method organisation_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organisation_id' is set
        if ('organisation_id' not in params or
                params['organisation_id'] is None):
            raise ValueError("Missing the required parameter `organisation_id` when calling `organisation_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'organisation_id' in params:
            path_params['organisation_id'] = params['organisation_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'organisation_update' in params:
            body_params = params['organisation_update']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/organisations/{organisation_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Organisation',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def purge_expired_invitations(self, **kwargs):  # noqa: E501
        """purge_expired_invitations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.purge_expired_invitations(async=True)
        >>> result = thread.get()

        :param async bool
        :param date cutoff_date: An optional cutoff date to purge invites before this date
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.purge_expired_invitations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.purge_expired_invitations_with_http_info(**kwargs)  # noqa: E501
            return data

    def purge_expired_invitations_with_http_info(self, **kwargs):  # noqa: E501
        """purge_expired_invitations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.purge_expired_invitations_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param date cutoff_date: An optional cutoff date to purge invites before this date
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cutoff_date']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purge_expired_invitations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cutoff_date' in params:
            query_params.append(('cutoff_date', params['cutoff_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/invitations/purge_expired', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_delete(self, user_id, **kwargs):  # noqa: E501
        """user_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_delete(user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.user_delete_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_delete_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_delete_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """user_delete  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_delete_with_http_info(user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_list(self, **kwargs):  # noqa: E501
        """user_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_list(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param str birth_date: An optional birth_date range filter
        :param str country: An optional country filter
        :param str date_joined: An optional date joined range filter
        :param str email: An optional case insensitive email inner match filter
        :param bool email_verified: An optional email verified filter
        :param str first_name: An optional case insensitive first name inner match filter
        :param str gender: An optional gender filter
        :param bool is_active: An optional is_active filter
        :param str last_login: An optional last login range filter
        :param str last_name: An optional case insensitive last name inner match filter
        :param str msisdn: An optional case insensitive MSISDN inner match filter
        :param bool msisdn_verified: An optional MSISDN verified filter
        :param str nickname: An optional case insensitive nickname inner match filter
        :param int organisation_id: An optional filter on the organisation id
        :param str updated_at: An optional updated_at range filter
        :param str username: An optional case insensitive username inner match filter
        :param str q: An optional case insensitive inner match filter across all searchable text fields
        :param bool tfa_enabled: An optional filter based on whether a user has 2FA enabled or not
        :param bool has_organisation: An optional filter based on whether a user belongs to an organisation or not
        :param list[str] order_by: Fields and directions to order by, e.g. \"-created_at,username\". Add \"-\" in front of a field name to indicate descending order.
        :param list[str] user_ids: An optional list of user ids
        :param list[int] site_ids: An optional list of site ids
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.user_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_list_with_http_info(self, **kwargs):  # noqa: E501
        """user_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_list_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: An optional query parameter specifying the offset in the result set to start from.
        :param int limit: An optional query parameter to limit the number of results returned.
        :param str birth_date: An optional birth_date range filter
        :param str country: An optional country filter
        :param str date_joined: An optional date joined range filter
        :param str email: An optional case insensitive email inner match filter
        :param bool email_verified: An optional email verified filter
        :param str first_name: An optional case insensitive first name inner match filter
        :param str gender: An optional gender filter
        :param bool is_active: An optional is_active filter
        :param str last_login: An optional last login range filter
        :param str last_name: An optional case insensitive last name inner match filter
        :param str msisdn: An optional case insensitive MSISDN inner match filter
        :param bool msisdn_verified: An optional MSISDN verified filter
        :param str nickname: An optional case insensitive nickname inner match filter
        :param int organisation_id: An optional filter on the organisation id
        :param str updated_at: An optional updated_at range filter
        :param str username: An optional case insensitive username inner match filter
        :param str q: An optional case insensitive inner match filter across all searchable text fields
        :param bool tfa_enabled: An optional filter based on whether a user has 2FA enabled or not
        :param bool has_organisation: An optional filter based on whether a user belongs to an organisation or not
        :param list[str] order_by: Fields and directions to order by, e.g. \"-created_at,username\". Add \"-\" in front of a field name to indicate descending order.
        :param list[str] user_ids: An optional list of user ids
        :param list[int] site_ids: An optional list of site ids
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'birth_date', 'country', 'date_joined', 'email', 'email_verified', 'first_name', 'gender', 'is_active', 'last_login', 'last_name', 'msisdn', 'msisdn_verified', 'nickname', 'organisation_id', 'updated_at', 'username', 'q', 'tfa_enabled', 'has_organisation', 'order_by', 'user_ids', 'site_ids']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_list" % key
                )
            params[key] = val
        del params['kwargs']

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `user_list`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `user_list`, must be a value less than or equal to `100`")  # noqa: E501
        if 'limit' in params and params['limit'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `user_list`, must be a value greater than or equal to `1`")  # noqa: E501
        if ('country' in params and
                len(params['country']) > 2):
            raise ValueError("Invalid value for parameter `country` when calling `user_list`, length must be less than or equal to `2`")  # noqa: E501
        if ('country' in params and
                len(params['country']) < 2):
            raise ValueError("Invalid value for parameter `country` when calling `user_list`, length must be greater than or equal to `2`")  # noqa: E501
        if ('email' in params and
                len(params['email']) < 3):
            raise ValueError("Invalid value for parameter `email` when calling `user_list`, length must be greater than or equal to `3`")  # noqa: E501
        if ('first_name' in params and
                len(params['first_name']) < 3):
            raise ValueError("Invalid value for parameter `first_name` when calling `user_list`, length must be greater than or equal to `3`")  # noqa: E501
        if ('last_name' in params and
                len(params['last_name']) < 3):
            raise ValueError("Invalid value for parameter `last_name` when calling `user_list`, length must be greater than or equal to `3`")  # noqa: E501
        if ('msisdn' in params and
                len(params['msisdn']) < 3):
            raise ValueError("Invalid value for parameter `msisdn` when calling `user_list`, length must be greater than or equal to `3`")  # noqa: E501
        if ('nickname' in params and
                len(params['nickname']) < 3):
            raise ValueError("Invalid value for parameter `nickname` when calling `user_list`, length must be greater than or equal to `3`")  # noqa: E501
        if ('username' in params and
                len(params['username']) < 3):
            raise ValueError("Invalid value for parameter `username` when calling `user_list`, length must be greater than or equal to `3`")  # noqa: E501
        if ('q' in params and
                len(params['q']) < 3):
            raise ValueError("Invalid value for parameter `q` when calling `user_list`, length must be greater than or equal to `3`")  # noqa: E501
        if ('user_ids' in params and
                len(params['user_ids']) < 1):
            raise ValueError("Invalid value for parameter `user_ids` when calling `user_list`, number of items must be greater than or equal to `1`")  # noqa: E501
        if ('site_ids' in params and
                len(params['site_ids']) < 1):
            raise ValueError("Invalid value for parameter `site_ids` when calling `user_list`, number of items must be greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'birth_date' in params:
            query_params.append(('birth_date', params['birth_date']))  # noqa: E501
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501
        if 'date_joined' in params:
            query_params.append(('date_joined', params['date_joined']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'email_verified' in params:
            query_params.append(('email_verified', params['email_verified']))  # noqa: E501
        if 'first_name' in params:
            query_params.append(('first_name', params['first_name']))  # noqa: E501
        if 'gender' in params:
            query_params.append(('gender', params['gender']))  # noqa: E501
        if 'is_active' in params:
            query_params.append(('is_active', params['is_active']))  # noqa: E501
        if 'last_login' in params:
            query_params.append(('last_login', params['last_login']))  # noqa: E501
        if 'last_name' in params:
            query_params.append(('last_name', params['last_name']))  # noqa: E501
        if 'msisdn' in params:
            query_params.append(('msisdn', params['msisdn']))  # noqa: E501
        if 'msisdn_verified' in params:
            query_params.append(('msisdn_verified', params['msisdn_verified']))  # noqa: E501
        if 'nickname' in params:
            query_params.append(('nickname', params['nickname']))  # noqa: E501
        if 'organisation_id' in params:
            query_params.append(('organisation_id', params['organisation_id']))  # noqa: E501
        if 'updated_at' in params:
            query_params.append(('updated_at', params['updated_at']))  # noqa: E501
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'tfa_enabled' in params:
            query_params.append(('tfa_enabled', params['tfa_enabled']))  # noqa: E501
        if 'has_organisation' in params:
            query_params.append(('has_organisation', params['has_organisation']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
            collection_formats['order_by'] = 'csv'  # noqa: E501
        if 'user_ids' in params:
            query_params.append(('user_ids', params['user_ids']))  # noqa: E501
            collection_formats['user_ids'] = 'csv'  # noqa: E501
        if 'site_ids' in params:
            query_params.append(('site_ids', params['site_ids']))  # noqa: E501
            collection_formats['site_ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[User]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_read(self, user_id, **kwargs):  # noqa: E501
        """user_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_read(user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.user_read_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_read_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_read_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """user_read  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_read_with_http_info(user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_read" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_read`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_update(self, user_id, **kwargs):  # noqa: E501
        """user_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_update(user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :param UserUpdate user_update:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.user_update_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_update_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_update_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """user_update  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.user_update_with_http_info(user_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str user_id: A UUID value identifying the user. (required)
        :param UserUpdate user_update:
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'user_update']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_update' in params:
            body_params = params['user_update']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['APIKeyHeader']  # noqa: E501

        return self.api_client.call_api(
            '/users/{user_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
